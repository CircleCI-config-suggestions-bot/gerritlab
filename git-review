#!/usr/bin/env python

import sys
import os
import re
import argparse
import collections
import json
from git import Repo
import requests

url = None
headers = None
change_id_re = r"Change-Id: (.+?)(\s|$)"


def load_gitlab_config(root_dir):
    global url
    global headers
    with open(os.path.join(root_dir, ".git/hooks/gitlab_config.json")) as f:
        gitlab_config = json.load(f)
    url = "{}/projects/{}/merge_requests".format(
        gitlab_config["GITLAB_API_V4"], gitlab_config["PROJECT_ID"])
    headers = {"PRIVATE-TOKEN": gitlab_config["PRIVATE_TOKEN"]}


def get_msg_title_description(msg):
    title, desc = tuple(msg.split("\n", 1))
    desc = re.sub(change_id_re, "", desc)
    return title, desc


def get_change_id(msg):
    m = re.search(change_id_re, msg)
    if m:
        return m.group(1)
    else:
        raise ValueError("Didn't find the Change-Id in the commit message!")


def get_remote_branch_name(local_branch, change_id):
    return "{}-{}".format(local_branch, change_id[1:5])


def is_remote_stale(commits, remote_commits):
    """Checks if remote becomes stale due to local changes."""
    shas = set([c.hexsha for c in commits])
    remote_shas = set([c.hexsha for c in remote_commits])
    return shas != remote_shas


def get_merge_request(branch):
    """Return a `MergeRequest` given branch name."""
    r = requests.get("{}?state=opened".format(url), headers=headers)
    for mr in r.json():
        if mr["source_branch"] == branch:
            return MergeRequest(json_data = mr)
    return None


def submit_merge_requests(remote_repo, local_branch, commits, remote_commits):
    """Submits merge requests."""
    assert not is_remote_stale(commits, remote_commits), "Remote is stale!"
    # Get MRs created off of the given branch.
    r = requests.get("{}?state=opened".format(url), headers=headers)
    mrs = collections.OrderedDict()
    for mr in r.json():
        if mr["source_branch"].startswith(local_branch):
            mrs[mr["target_branch"]] = mr

    def mergeable(mr):
        return mr["merge_status"] == "can_be_merged"

    def find_mergeable_chain(mrs, root):
        if not mergeable(root):
            return []
        else:
            mergeables = [MergeRequest(json_data=root)]
            if root["source_branch"] not in mrs:
                return mergeables
            else:
                next_mr = mrs[root["source_branch"]]
                mergeables.extend(find_mergeable_chain(mrs, next_mr))
                return mergeables

    root = mrs["master"]
    mergeables = find_mergeable_chain(mrs, root)
    # We must submit MRs from the oldest. And before submitting an MR, we must
    # change its target_branch to master.
    for mr in mergeables:
        mr.update(target_branch="master")
        mr.print_info()
        #mr.submit()


def delete_invalid_merge_requests(
        remote_repo, local_branch, commits, remote_commits):
    """Deletes the invalid merge requests and their branches."""

    change_ids = set([get_change_id(c.message) for c in commits])
    remote_change_ids = set([get_change_id(c.message) for c in remote_commits])
    deleted_change_ids = list(remote_change_ids - change_ids)
    for change_id in deleted_change_ids:
        # Delete the MR by its iid.
        mr = get_merge_request(get_remote_branch_name(local_branch, change_id))
        mr.delete()
        # Delete the branch as well.
        remote_repo.push(
            refspec=":{}".format(
                get_remote_branch_name(local_branch, change_id)))


class MergeRequest:

    def __init__(
            self, source_branch=None, target_branch=None,
            title=None, description=None, json_data=None):
        self._source_branch = source_branch if source_branch else json_data[
            "source_branch"]
        self._target_branch = target_branch if target_branch else json_data[
            "target_branch"]
        self._local_branch = self._source_branch.rsplit("-", 1)[0]
        self._title = title if title else json_data["title"]
        self._description = description if description else json_data[
            "description"]
        self._iid = json_data["iid"] if json_data else None
        self._mr_url = json_data["web_url"] if json_data else None

    def print_info(self):
        print(self._title)
        print("    {} -> {}".format(self._local_branch, self._source_branch))
        print("    MR link: {}".format(self._mr_url))

    def create(self):
        data = {
            "source_branch": self._source_branch,
            "target_branch": self._target_branch,
            "title": self._title,
            "description": self._description,
        }
        r = requests.post(url, headers=headers, data=data)
        if r.status_code != requests.codes.ok:
            r.raise_for_status()
        data = r.json()
        self._iid = data["iid"]
        self._mr_url = data["web_url"]
        self.print_info()

    def update(
            self, source_branch=None, target_branch=None, title=None,
            description=None):
        if source_branch is not None:
            self._source_branch = source_branch
        if target_branch is not None:
            self._target_branch = target_branch
        if title is not None:
            self._title = title
        if description is not None:
            self._description = description
        data = {
            "source_branch": self._source_branch,
            "target_branch": self._target_branch,
            "title": self._title,
            "description": self._description,
        }
        r = requests.put(
            "{}/{}".format(url, self._iid), headers=headers, data=data)
        if r.status_code != requests.codes.ok:
            r.raise_for_status()
        data = r.json()
        self._iid = data["iid"]
        self._mr_url = data["web_url"]
        self.print_info()

    def submit(self):
        if self._iid is None:
            raise ValueError("Must set iid before submittng an MR!")
        r = requests.put("{}/{}/merge".format(url, self._iid), headers=headers)
        if r.status_code != requests.codes.ok:
            r.raise_for_status()

    def delete(self):
        if self._iid is None:
            raise ValueError("Must set iid before deleting an MR!")
        r = requests.delete("{}/{}".format(url, self._iid), headers=headers)
        if r.status_code != requests.codes.ok:
            r.raise_for_status()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "remote", type=str, help="The remote to push the reviews.")
    parser.add_argument(
        "local_branch", type=str, nargs="?",
        help="The local branch to be reviewed.")
    parser.add_argument(
        "--merge", action="store_true", default=False,
        help="Merge the MRs if they are approved.")
    args = parser.parse_args()

    repo = Repo(os.getcwd(), search_parent_directories=True)
    root_dir = repo.git.rev_parse("--show-toplevel")
    load_gitlab_config(root_dir)
    remote = repo.remote(name=args.remote)
    local_branch = args.local_branch
    if args.local_branch is None:
        local_branch = repo.active_branch.name
        print(
            "No local branch specified. Using the active branch: {}".format(
                local_branch))

    # Get the local commits that are ahead of the origin/master.
    remote.fetch(prune=True)
    commits = list(repo.iter_commits("origin/master..{}".format(local_branch)))
    commits.reverse()
    # Get the remote commits that are ahead of the origin/master.
    remote_commits = list(
        repo.iter_commits("origin/master..origin/{}".format(local_branch)))
    remote_commits.reverse()

    # Submit the MRs if they have been approved.
    if args.merge:
        print("Submitting merge requests:")
        submit_merge_requests(remote, local_branch, commits, remote_commits)
        sys.exit(0)

    # Delete the MRs whose commits are now deleted since the last review.
    if "origin/{}".format(local_branch) in [r.name for r in repo.references]:
        delete_invalid_merge_requests(
            remote, local_branch, commits, remote_commits)

    # Push the commits to remote by creating a new branch for each.
    remote.push(
        refspec="{}:refs/heads/{}".format(local_branch, local_branch),
        force=True)
    remote_branches = {}
    for c in commits:
        change_id = get_change_id(c.message)
        remote_branch = get_remote_branch_name(local_branch, change_id)
        remote.push(
            refspec="{}:refs/heads/{}".format(c.hexsha, remote_branch),
            force=True)
        remote_branches[c.hexsha] = remote_branch

    # Create a merge request for each commit.
    print("Creating merge requests:")
    for idx, c in enumerate(commits):
        change_id = get_change_id(c.message)
        source_branch = remote_branches[c.hexsha]
        if idx == 0:
            # If this is the oldest commit, then the target branch should be
            # master.
            target_branch = "master"
        else:
            target_branch = remote_branches[commits[idx - 1].hexsha]
        title, desp = get_msg_title_description(c.message)
        mr = get_merge_request(source_branch)
        if mr is not None:
            mr.update(
                source_branch=source_branch, target_branch=target_branch,
                title=title, description=desp)
        else:
            mr = MergeRequest(
                source_branch=source_branch, target_branch=target_branch,
                title=title, description=desp)
            mr.create()


if __name__ == "__main__":
    main()
