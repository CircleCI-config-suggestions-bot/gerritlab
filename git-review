#!/usr/bin/env python

import sys
import os
import re
import argparse
import json
from git import Repo
import requests

change_id_re = r"Change-Id: (.+?)(\s|$)"


def load_gitlab_config(root_dir):
    with open(os.path.join(root_dir, ".git/hooks/gitlab_config.json")) as f:
        gitlab_config = json.load(f)
    MergeRequest.url = "{}/projects/{}/merge_requests".format(
        gitlab_config["GITLAB_API_V4"], gitlab_config["PROJECT_ID"])
    MergeRequest.headers = {"PRIVATE-TOKEN": gitlab_config["PRIVATE_TOKEN"]}


def get_msg_title_description(msg):
    title, desc = tuple(msg.split("\n", 1))
    desc = re.sub(change_id_re, "", desc)
    return title, desc


def get_change_id(msg):
    m = re.search(change_id_re, msg)
    if m:
        return m.group(1)
    else:
        raise ValueError("Didn't find the Change-Id in the commit message!")


def get_remote_branch_name(local_branch, change_id):
    return "{}-{}".format(local_branch, change_id[1:5])


def delete_invalid_merge_requests(
        remote_repo, local_branch, commits, remote_commits):
    """Deletes the invalid merge requests and their branches."""
    change_ids = set([get_change_id(c.message) for c in commits])
    remote_change_ids = set(
        [get_change_id(c.message) for c in remote_commits])
    deleted_change_ids = list(remote_change_ids - change_ids)
    for change_id in deleted_change_ids:
        # Delete the MR by its iid.
        iid = MergeRequest.get_merge_request(local_branch, change_id)
        MergeRequest.delete_merge_request(iid)
        # Delete the branch as well.
        remote_repo.push(
            refspec=":{}".format(
                get_remote_branch_name(local_branch, change_id)))


class MergeRequest:
    url = None
    headers = None

    def __init__(
            self, remote_repo, change_id, local_branch, source_branch, target_branch, title,
            description):
        self._remote_repo = remote_repo
        self._change_id = change_id
        self._local_branch = local_branch
        self._source_branch = source_branch
        self._target_branch = target_branch
        self._title = title
        self._description = description

    @staticmethod
    def get_merge_request(local_branch, change_id):
        r = requests.get(
            "{}?state=opened".format(MergeRequest.url),
            headers=MergeRequest.headers)
        for mr in r.json():
            if get_remote_branch_name(local_branch,
                                      change_id) == mr["source_branch"]:
                return mr["iid"]
        raise ValueError("Can't find a MR associated with the given Change-Id!")

    @staticmethod
    def delete_merge_request(iid):
        """Deletes a merge request and its branch."""
        r = requests.delete(
            "{}/{}".format(MergeRequest.url, iid), headers=MergeRequest.headers)
        if r.status_code != requests.codes.ok:
            r.raise_for_status()

    def exists(self):
        r = requests.get(
            "{}?state=opened".format(self.url), headers=self.headers)
        mrs = r.json()
        for mr in r.json():
            if self._source_branch == mr["source_branch"]:
                return True, mr["iid"]
        return False, -1

    def _print_info(self, mr_url):
        print(self._title)
        print("    {} -> {}".format(self._local_branch, self._source_branch))
        print("    MR link: {}".format(mr_url))

    def create(self):
        data = {
            "source_branch": self._source_branch,
            "target_branch": self._target_branch,
            "title": self._title,
            "description": self._description,
        }
        r = requests.post(self.url, headers=self.headers, data=data)
        if r.status_code != requests.codes.ok:
            r.raise_for_status()
        self._print_info(r.json()["web_url"])

    def update(self, iid):
        data = {
            "source_branch": self._source_branch,
            "target_branch": self._target_branch,
            "title": self._title,
            "description": self._description,
        }
        r = requests.put(
            "{}/{}".format(self.url, iid), headers=self.headers, data=data)
        if r.status_code != requests.codes.ok:
            r.raise_for_status()
        self._print_info(r.json()["web_url"])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "remote", type=str, help="The remote to push the reviews.")
    parser.add_argument(
        "local_branch", type=str, nargs="?",
        help="The local branch to be reviewed.")
    args = parser.parse_args()

    repo = Repo(os.getcwd(), search_parent_directories=True)
    root_dir = repo.git.rev_parse("--show-toplevel")
    load_gitlab_config(root_dir)
    remote = repo.remote(name=args.remote)
    local_branch = args.local_branch
    if args.local_branch is None:
        local_branch = repo.active_branch.name
        print(
            "No local branch specified. Using the active branch: {}".format(
                local_branch))

    # Get the commits we are ahead of the origin/master.
    remote.fetch(prune=True)
    commits = list(repo.iter_commits("origin/master..{}".format(local_branch)))
    commits.reverse()

    # Delete the MRs whose commits are now deleted since the last review.
    if "origin/{}".format(local_branch) in [r.name for r in repo.references]:
        remote_commits = list(
            repo.iter_commits("origin/master..origin/{}".format(local_branch)))
        remote_commits.reverse()
        delete_invalid_merge_requests(
            remote, local_branch, commits, remote_commits)

    # Push the commits to remote by creating a new branch for each.
    remote.push(
        refspec="{}:refs/heads/{}".format(local_branch, local_branch),
        force=True)
    remote_branches = {}
    for c in commits:
        change_id = get_change_id(c.message)
        remote_branch = get_remote_branch_name(local_branch, change_id)
        remote.push(
            refspec="{}:refs/heads/{}".format(c.hexsha, remote_branch),
            force=True)
        remote_branches[c.hexsha] = remote_branch

    # Create a merge request for each commit.
    print("Creating merge requests:")
    for idx, c in enumerate(commits):
        change_id = get_change_id(c.message)
        source_branch = remote_branches[c.hexsha]
        if idx == 0:
            # If this is the oldest commit, then the target branch should be
            # master.
            target_branch = "master"
        else:
            target_branch = remote_branches[commits[idx - 1].hexsha]
        title, desp = get_msg_title_description(c.message)
        mr = MergeRequest(
            remote_repo=remote, change_id=change_id, local_branch=local_branch,
            source_branch=source_branch, target_branch=target_branch,
            title=title, description=desp)
        exists, iid = mr.exists()
        if not exists:
            mr.create()
        else:
            mr.update(iid)


if __name__ == "__main__":
    main()
