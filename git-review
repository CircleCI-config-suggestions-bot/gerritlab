#!/usr/bin/env python

import sys
import os
import re
import argparse
import configparser
import collections
import json
from git import Repo
import requests

mr_url = None
pipeline_url = None
pipelines_url = None
headers = None
remove_source_branch = False
change_id_re = r"Change-Id: (.+?)(\s|$)"
dry_run = False


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def warn(msg):
    print(bcolors.WARNING + "warning" + bcolors.ENDC + ": {}".format(msg))


def load_gitreview_config(remote, root_dir):
    global mr_url
    global pipeline_url
    global pipelines_url
    global headers
    global remove_source_branch
    config = configparser.ConfigParser()
    config.read(os.path.join(root_dir, ".gitreview"))
    configs = config[remote]
    host = configs["host"]
    project_id = configs["project_id"]
    private_token = configs["private_token"]
    # Optional configs.
    if "remove_source_branch" in configs:
        remove_source_branch = configs.getboolean("remove_source_branch")
    mr_url = "{}/api/v4/projects/{}/merge_requests".format(host, project_id)
    pipeline_url = "{}/api/v4/projects/{}/pipeline".format(host, project_id)
    pipelines_url = "{}/api/v4/projects/{}/pipelines".format(host, project_id)
    headers = {"PRIVATE-TOKEN": private_token}


def get_msg_title_description(msg):
    title, desc = tuple(msg.split("\n", 1))
    desc = re.sub(change_id_re, "", desc)
    return title, desc


def get_change_id(msg, silent=False):
    m = re.search(change_id_re, msg)
    if m:
        return m.group(1)
    elif not silent:
        raise ValueError("Didn't find the Change-Id in the commit message!")
    else:
        return None


def get_remote_branch_name(local_branch, change_id):
    return "{}-{}".format(local_branch, change_id[1:5])


def is_remote_stale(commits, remote_commits):
    """Checks if remote becomes stale due to local changes."""
    shas = set([c.hexsha for c in commits])
    remote_shas = set([c.hexsha for c in remote_commits])
    return shas != remote_shas


def get_merge_request(branch):
    """Return a `MergeRequest` given branch name."""
    r = requests.get("{}?state=opened".format(mr_url), headers=headers)
    for mr in r.json():
        if mr["source_branch"] == branch:
            return MergeRequest(json_data=mr)
    return None


class MergeRequest:

    def __init__(
            self, source_branch=None, target_branch=None, title=None,
            description=None, json_data=None):
        self._source_branch = source_branch
        self._target_branch = target_branch
        self._title = title
        self._description = description
        self._iid = None
        self._web_url = None
        self._mergeable = False

        if json_data is not None:
            for attr in json_data:
                setattr(self, "_{}".format(attr), json_data[attr])

        self._local_branch = self._source_branch.rsplit("-", 1)[0]

    @property
    def mergeable(self):
        return self._mergeable

    @property
    def source_branch(self):
        return self._source_branch

    def print_info(self, verbose=False):
        print("* {} {}".format(self._web_url, self._title))
        if verbose:
            print(
                "    {} -> {} ({})".format(
                    self._local_branch, self._source_branch,
                    self._target_branch))

    def create(self):
        data = {
            "source_branch": self._source_branch,
            "target_branch": self._target_branch,
            "title": self._title,
            "description": self._description,
            "remove_source_branch": remove_source_branch,
        }
        r = requests.post(mr_url, headers=headers, data=data)
        if r.status_code != requests.codes.ok:
            r.raise_for_status()
        data = r.json()
        self._iid = data["iid"]
        self._web_url = data["web_url"]

    def update(
            self, source_branch=None, target_branch=None, title=None,
            description=None):
        if source_branch is not None:
            self._source_branch = source_branch
        if target_branch is not None:
            self._target_branch = target_branch
        if title is not None:
            self._title = title
        if description is not None:
            self._description = description
        data = {
            "source_branch": self._source_branch,
            "target_branch": self._target_branch,
            "title": self._title,
            "description": self._description,
        }
        r = requests.put(
            "{}/{}".format(mr_url, self._iid), headers=headers, data=data)
        if r.status_code != requests.codes.ok:
            r.raise_for_status()
        data = r.json()
        self._iid = data["iid"]
        self._web_url = data["web_url"]

    def submit(self):
        if self._iid is None:
            raise ValueError("Must set iid before submittng an MR!")
        r = requests.put(
            "{}/{}/merge".format(mr_url, self._iid), headers=headers)
        if r.status_code != requests.codes.ok:
            r.raise_for_status()

    def delete(self):
        if self._iid is None:
            raise ValueError("Must set iid before deleting an MR!")
        r = requests.delete("{}/{}".format(mr_url, self._iid), headers=headers)
        if r.status_code != requests.codes.ok:
            r.raise_for_status()


def submit_merge_requests(remote, local_branch):
    """Submits merge requests."""

    # Get MRs created off of the given branch.
    r = requests.get("{}?state=opened".format(mr_url), headers=headers)
    mrs = collections.OrderedDict()
    for json_data in r.json():
        if json_data["source_branch"].startswith(local_branch):
            mrs[json_data["target_branch"]] = MergeRequest(json_data=json_data)
    if len(mrs) == 0:
        print("No MRs found for this branch: {}".format(local_branch))
        return
    for mr in mrs.values():
        mr.print_info()
        print("    [mergeable]: {}".format(mr.mergeable))

    def find_mergeable_chain(mrs, root):
        if not root.mergeable:
            return []
        else:
            mergeables = [root]
            if root.source_branch not in mrs:
                return mergeables
            else:
                next_mr = mrs[root.source_branch]
                mergeables.extend(find_mergeable_chain(mrs, next_mr))
                return mergeables

    if "master" not in mrs:
        warn("Not a single MR interested in merging into master?")
        return

    root = mrs["master"]
    mergeables = find_mergeable_chain(mrs, root)
    if len(mergeables) == 0:
        warn("No MRs are currently mergeable.")
        return

    if not dry_run:
        # We must submit MRs from the oldest. And before submitting an MR, we
        # must change its target_branch to master.
        for mr in mergeables:
            mr.update(target_branch="master")
            #FIXME: Poll the merge req status and waiting until
            # merge_status is no longer "checking".
            mr.submit()

        print()
        print(bcolors.OKGREEN + "SUCCESS" + bcolors.ENDC)
        print()
        print("New Merged MRs:")
        for mr in mergeables:
            mr.print_info(verbose=True)
        print("To {}".format(remote.url))


def create_merge_requests(repo, remote, local_branch, trigger_ci):
    """Creates new merge requests on remote."""

    def can_skip_ci(commit, remote_branch):
        """Finds out if this commit can skip the CI pipeline."""
        # Chek if the commit actually changes anything compared to the remote
        # that requries a new CI pipeline.
        if "origin/{}".format(remote_branch) in [r.name for r in remote.refs]:
            diff = list(
                repo.iter_commits(
                    "origin/{}..{}".format(remote_branch, commit.hexsha)))
            if not any(diff):
                return True

            remote_commit = list(
                repo.iter_commits(rev="origin/{}".format(remote_branch)))[0]
            if get_change_id(remote_commit.message) != get_change_id(
                    commit.message):
                raise Exception(
                    "The local commit has a different Change-Id from the "
                    "one on the same branch in remote!")
            if not any(commit.diff(remote_commit)):
                return True
        return False

    def get_pipeline_by_sha(sha):
        r = requests.get(pipelines_url, headers=headers)
        for pipeline in r.json():
            if pipeline["sha"] == sha:
                return pipeline
        raise ValueError("Didn't find a pipeline with the given sha!")

    def create_pipeline(ref):
        requests.post("{}?ref={}".format(pipeline_url, ref), headers=headers)

    def retry_pipeline(p_id):
        requests.post(
            "{}/{}/retry".format(pipelines_url, p_id), headers=headers)

    def cancel_prev_pipelines(commit):
        """Cancels previous pipelinesa associated with the same Change-Id."""
        # Get the running pipelines.
        r = requests.get(
            "{}?status=running&status!=skipped".format(pipelines_url),
            headers=headers)
        change_id = get_change_id(c.message)
        for pipeline in r.json():
            if pipeline["sha"] == commit.hexsha:
                continue
            remote_change_id = get_change_id(
                repo.git.log(pipeline["sha"], n=1), silent=True)
            if remote_change_id is not None and remote_change_id == change_id:
                # Found a pipeline to cancel.
                d = requests.post(
                    "{}/{}/cancel".format(pipelines_url, pipeline["id"]),
                    headers=headers)

    # Sync up remote branches.
    remote.fetch(prune=True)

    # Get the local commits that are ahead of the origin/master.
    commits = list(repo.iter_commits("origin/master..{}".format(local_branch)))
    commits.reverse()

    # Push the commits to remote by creating a new branch for each.
    remote_branches = {}
    for c in commits:
        change_id = get_change_id(c.message)
        remote_branch = get_remote_branch_name(local_branch, change_id)
        cancel_prev_pipelines(c)
        if not trigger_ci and can_skip_ci(c, remote_branch):
            remote.push(
                refspec="{}:refs/heads/{}".format(c.hexsha, remote_branch),
                force=True, o="ci.skip")
        else:
            remote.push(
                refspec="{}:refs/heads/{}".format(c.hexsha, remote_branch),
                force=True)
            pipeline = get_pipeline_by_sha(c.hexsha)
            if pipeline["status"] == "skipped":
                create_pipeline(remote_branch)
            elif pipeline["status"] == "failed" or pipeline[
                    "status"] == "canceled":
                retry_pipeline(pipeline["id"])
        remote_branches[c.hexsha] = remote_branch

    # Create a merge request for each commit.
    new_mrs = []
    updated_mrs = []
    for idx, c in enumerate(commits):
        change_id = get_change_id(c.message)
        source_branch = remote_branches[c.hexsha]
        if idx == 0:
            # If this is the oldest commit, then the target branch should be
            # master.
            target_branch = "master"
        else:
            target_branch = remote_branches[commits[idx - 1].hexsha]
        title, desp = get_msg_title_description(c.message)
        mr = get_merge_request(source_branch)
        if mr is not None:
            mr.update(
                source_branch=source_branch, target_branch=target_branch,
                title=title, description=desp)
            updated_mrs.append(mr)
        else:
            mr = MergeRequest(
                source_branch=source_branch, target_branch=target_branch,
                title=title, description=desp)
            mr.create()
            new_mrs.append(mr)
    print("\n{}\n".format(bcolors.OKGREEN + "SUCCESS" + bcolors.ENDC))
    if len(new_mrs) > 0:
        print("New MRs:")
        for mr in new_mrs:
            mr.print_info(verbose=True)
        print()
    if len(updated_mrs) > 0:
        print("Updated MRs:")
        for mr in updated_mrs:
            mr.print_info(verbose=True)
        print()
    print("To {}".format(remote.url))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "remote", type=str, nargs="?", default="origin",
        help="The remote to push the reviews.")
    parser.add_argument(
        "local_branch", type=str, nargs="?",
        help="The local branch to be reviewed.")
    parser.add_argument(
        "--merge", "-m", action="store_true", default=False,
        help="Merge the MRs if they are approved.")
    parser.add_argument(
        "--dry-run", "-d", action="store_true", default=False,
        help="Dry run the command.")
    parser.add_argument(
        "--trigger-ci", "-t", action="store_true", default=False,
        help="Trigger the CI pipeline.")
    args = parser.parse_args()

    repo = Repo(os.getcwd(), search_parent_directories=True)
    load_gitreview_config(args.remote, repo.git.rev_parse("--show-toplevel"))
    remote = repo.remote(name=args.remote)
    local_branch = args.local_branch
    if args.local_branch is None:
        local_branch = repo.active_branch.name

    global dry_run
    dry_run = args.dry_run
    if dry_run:
        warn("Dry run mode.")

    # Submit the MRs if they become mergeable.
    if args.merge:
        print("Submitting merge requests:")
        submit_merge_requests(remote, local_branch)
        sys.exit(0)

    create_merge_requests(repo, remote, local_branch, args.trigger_ci)


if __name__ == "__main__":
    main()
